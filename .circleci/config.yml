version: 2.1

orbs:
  codecov: codecov/codecov@1
  snyk: snyk/snyk@0.0.10

executors:
  java:
    docker:
      - image: cimg/openjdk:11.0

commands:
  gradle:
    description: 'Run the provided gradle command'
    parameters:
      args:
        type: string
      when:
        default: "on_success"
        type: enum
        enum: ["on_fail", "on_success", "always"]
    steps:
      - run:
          name: << parameters.args >>
          command: ./gradlew << parameters.args >> --info --max-workers=2 -Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.console=plain --continue
          when: << parameters.when >>
  setup_build_environment:
    description: 'Generates cache key from a hash of all gradle files'
    steps:
      - checkout
      - run:
          name: Generate cache key
          command: find . -type f -name "*.gradle*" -o -name "gradle-wrapper*" -exec shasum {} + | sort > /tmp/checksum.txt && cat /tmp/checksum.txt
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "/tmp/checksum.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
  populate_and_save_cache:
    description: 'Downloads all gradle dependencies and uploads cache for later use'
    steps:
      - gradle:
          args: downloadDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "/tmp/checksum.txt" }}

jobs:
  build:
    executor: java
    steps:
      - setup_build_environment
      - populate_and_save_cache
      - gradle:
          args: build
      - gradle:
          args: jacocoTestReport
      - gradle:
          args: copyAllReports --output-dir=/tmp/test-reports
          when: always
      - codecov/upload
      - store_test_results:
          path: /tmp/test-reports
      - store_artifacts:
          path: /tmp/test-reports
          destination: reports
  publish:
    executor: java
    steps:
      - setup_build_environment
      - gradle:
          args: :tag -Prelease
      - add_ssh_keys:
          fingerprints:
            - 'd5:c5:b7:96:7f:ad:f8:13:1d:5d:5a:a5:f0:30:71:82'
      - run: git push origin $(./gradlew -q :printVersion)
      - gradle:
          args: publish
  snyk-scan:
    executor:
      name: java
    environment:
      GRADLE_OPTS: -Dorg.gradle.workers.max=1 # Snyk doesn't handle parallelism well
    steps:
      - setup_build_environment
      - snyk/scan:
          additional-arguments: --all-sub-projects --policy-path=.snyk

workflows:
  version: 2
  build-and-publish:
    jobs:
      - build
      - snyk-scan:
          context: hypertrace-vulnerability-scanning
      - publish:
          context: hypertrace-publishing
          requires:
            - build
            - snyk-scan
          filters:
            branches:
              only:
                - main
